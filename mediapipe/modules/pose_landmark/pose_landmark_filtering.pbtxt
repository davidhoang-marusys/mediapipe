# MediaPipe graph to filter landmarks temporally (across packets with
# incremental timestamps) to reduce jitter.
#
# EXAMPLE:
#   node {
#     calculator: "PoseLandmarkFiltering"
#     input_side_packet: "ENABLE:enable"
#     input_stream: "IMAGE_SIZE:image_size"
#     input_stream: "NORM_LANDMARKS:landmarks"
#     input_stream: "AUX_NORM_LANDMARKS:aux_landmarks"
#     input_stream: "WORLD_LANDMARKS:world_landmarks"
#     output_stream: "FILTERED_NORM_LANDMARKS:filtered_landmarks"
#     output_stream: "FILTERED_AUX_NORM_LANDMARKS:filtered_aux_landmarks"
#   }

type: "PoseLandmarkFiltering"

# Whether to enable filtering. If unspecified, functions as enabled. (bool)
input_side_packet: "ENABLE:enable"

# Size of the image (width & height) where the landmarks are estimated from.
# (std::pair<int, int>)
input_stream: "IMAGE_SIZE:image_size"
# Normalized landmarks. (NormalizedLandmarkList)
input_stream: "NORM_LANDMARKS:landmarks"
# Auxiliary set of normalized landmarks. (NormalizedLandmarkList)
input_stream: "AUX_NORM_LANDMARKS:aux_landmarks"

# min_cutoff. (double)
input_side_packet: "MIN_CUTOFF:min_cutoff"
# beta. (double)
input_side_packet: "BETA:beta"

# Filtered normalized landmarks. (NormalizedLandmarkList)
output_stream: "FILTERED_NORM_LANDMARKS:filtered_landmarks"
# Filtered auxiliary set of normalized landmarks. (NormalizedLandmarkList)
output_stream: "FILTERED_AUX_NORM_LANDMARKS:filtered_aux_landmarks"

# Converts landmarks to a detection that tightly encloses all landmarks.
node {
  calculator: "LandmarksToDetectionCalculator"
  input_stream: "NORM_LANDMARKS:aux_landmarks"
  output_stream: "DETECTION:aux_detection"
}

# Converts detection into a rectangle based on center and scale alignment
# points.
node {
  calculator: "AlignmentPointsRectsCalculator"
  input_stream: "DETECTION:aux_detection"
  input_stream: "IMAGE_SIZE:image_size"
  output_stream: "NORM_RECT:roi"
  options: {
    [mediapipe.DetectionsToRectsCalculatorOptions.ext] {
      rotation_vector_start_keypoint_index: 0
      rotation_vector_end_keypoint_index: 1
      rotation_vector_target_angle_degrees: 90
    }
  }
}

# Smoothes pose landmark visibilities to reduce jitter.
node {
  calculator: "SwitchContainer"
  input_side_packet: "ENABLE:enable"
  input_stream: "NORM_LANDMARKS:landmarks"
  output_stream: "NORM_FILTERED_LANDMARKS:filtered_visibility"
  options: {
    [mediapipe.SwitchContainerOptions.ext] {
      enable: true
      contained_node: {
        calculator: "VisibilitySmoothingCalculator"
        options: {
          [mediapipe.VisibilitySmoothingCalculatorOptions.ext] {
            no_filter: {}
          }
        }
      }
      contained_node: {
        calculator: "VisibilitySmoothingCalculator"
        options: {
          [mediapipe.VisibilitySmoothingCalculatorOptions.ext] {
            low_pass_filter {
              alpha: 0.1
            }
          }
        }
      }
    }
  }
}

# Smoothes pose landmark coordinates to reduce jitter.
node {
  calculator: "SwitchContainer"
  input_side_packet: "ENABLE:enable"
  input_stream: "NORM_LANDMARKS:filtered_visibility"
  input_stream: "IMAGE_SIZE:image_size"
  input_stream: "OBJECT_SCALE_ROI:roi"
  output_stream: "NORM_FILTERED_LANDMARKS:filtered_landmarks"
  options: {
    [mediapipe.SwitchContainerOptions.ext] {
      enable: true
      contained_node: {
        calculator: "LandmarksSmoothingCalculator"
        options: {
          [mediapipe.LandmarksSmoothingCalculatorOptions.ext] {
            no_filter: {}
          }
        }
      }
      contained_node: {
        calculator: "LandmarksSmoothingCalculator"
        options: {
          [mediapipe.LandmarksSmoothingCalculatorOptions.ext] {
            one_euro_filter {
              # Min cutoff 0.1 results into ~0.01 alpha in landmark EMA filter
              # when landmark is static.
              min_cutoff: 0.01
              # Beta 80.0 in combintation with min_cutoff 0.05 results into
              # ~0.94 alpha in landmark EMA filter when landmark is moving fast.
              beta: 10.0
              # Derivative cutoff 1.0 results into ~0.17 alpha in landmark
              # velocity EMA filter.
              derivate_cutoff: 1.0
            }
          }
        }
      }
    }
  }
}

# Smoothes auxiliary landmark visibilities to reduce jitter.
node {
  calculator: "VisibilitySmoothingCalculator"
  input_stream: "NORM_LANDMARKS:aux_landmarks"
  output_stream: "NORM_FILTERED_LANDMARKS:filtered_aux_visibility"
  options: {
    [mediapipe.VisibilitySmoothingCalculatorOptions.ext] {
      low_pass_filter {
        alpha: 0.1
      }
    }
  }
}

# Smoothes auxiliary landmarks to reduce jitter.
node {
  calculator: "ConfigurableLandmarksSmoothingCalculator"
  input_stream: "NORM_LANDMARKS:filtered_aux_visibility"
  input_stream: "IMAGE_SIZE:image_size"
  input_stream: "OBJECT_SCALE_ROI:roi"
  input_side_packet: "MIN_CUTOFF:min_cutoff"         # Pass graph-level MIN_CUTOFF to node-level MIN_CUTOFF
  input_side_packet: "BETA:beta"   
  output_stream: "NORM_FILTERED_LANDMARKS:filtered_aux_landmarks"
  options: {
    [mediapipe.LandmarksSmoothingCalculatorOptions.ext] {
      # Auxiliary landmarks are smoothed heavier than main landmarks to
      # make ROI crop for pose landmarks prediction very stable when
      # object is not moving but responsive enough in case of sudden
      # movements.
      one_euro_filter {
        # Derivative cutoff 1.0 results into ~0.17 alpha in landmark
        # velocity EMA filter.
        derivate_cutoff: 1.0
      }
    }
  }
}
